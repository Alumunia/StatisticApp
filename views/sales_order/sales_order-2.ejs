<%- include ../layouts/header %>
<style>
    .axis path, .axis line
    {
        fill: none;
        stroke: #777;
        shape-rendering: crispEdges;
    }

    .axis text
    {
        font-family: 'Arial';
        font-size: 13px;
    }
    .tick
    {
        stroke-dasharray: 1, 2;
    }
    .bar
    {
        fill: FireBrick;
    }


</style>
<body>
    <% for (var i=0;i < data.length;i++) {%>
    <p><%= data[i].so_date %> - <%= data[i].store_id %></p>
    <% } %>


    <svg id="visualisation" width="1000" height="500"></svg>
    <p>Hai</p>
</body>
<script>
    InitChart();

    function InitChart() {

        var barData1 = [
        ];


        var barData = [
            for (var i=0;i < data.length;i++) {
           
            };
            }
            {
                'x': 1,
                'y': 5
            }, {
                'x': 20,
                'y': 20
            },
        ];

        var vis = d3.select('#visualisation'),
                WIDTH = 1000,
                HEIGHT = 500,
                MARGINS = {
                    top: 20,
                    right: 20,
                    bottom: 20,
                    left: 50
                },
        xRange = d3.scale.ordinal().rangeRoundBands([MARGINS.left, WIDTH - MARGINS.right], 0.1).domain(barData.map(function (d) {
            return d.x;
        })),
                yRange = d3.scale.linear().range([HEIGHT - MARGINS.top, MARGINS.bottom]).domain([0,
            d3.max(barData, function (d) {
                return d.y;
            })
        ]),
                xAxis = d3.svg.axis()
                .scale(xRange)
                .tickSize(5)
                .tickSubdivide(true),
                yAxis = d3.svg.axis()
                .scale(yRange)
                .tickSize(5)
                .orient("left")
                .tickSubdivide(true);


        vis.append('svg:g')
                .attr('class', 'x axis')
                .attr('transform', 'translate(0,' + (HEIGHT - MARGINS.bottom) + ')')
                .call(xAxis);

        vis.append('svg:g')
                .attr('class', 'y axis')
                .attr('transform', 'translate(' + (MARGINS.left) + ',0)')
                .call(yAxis);

        vis.selectAll('rect')
                .data(barData)
                .enter()
                .append('rect')
                .attr('x', function (d) {
                    return xRange(d.x);
                })
                .attr('y', function (d) {
                    return yRange(d.y);
                })
                .attr('width', xRange.rangeBand())
                .attr('height', function (d) {
                    return ((HEIGHT - MARGINS.bottom) - yRange(d.y));
                })
                .attr('fill', 'grey')
                .on('mouseover', function (d) {
                    d3.select(this)
                            .attr('fill', 'blue');
                })
                .on('mouseout', function (d) {
                    d3.select(this)
                            .attr('fill', 'grey');
                });

    }
</script>
</html>